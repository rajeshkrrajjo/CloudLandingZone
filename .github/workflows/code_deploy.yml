name: Azure Terrform Plan
on:
  pull_request:
    branches:
      - main
      - dev
    paths:
      - 'azure/**'
  workflow_dispatch:

permissions:
    id-token: write
    issues: write
    pull-requests: write
    contents: read

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  ARM_USE_AZUREAD: true

jobs:
    terraform_plan:
        runs-on: ubuntu-latest
        environment: prod
        defaults:
            run:
              working-directory: ./azure/deploy
    
        steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2

        - name: Terraform Fmt
          id: fmt
          run: terraform fmt -check
        - name: Azure Login
          uses: azure/login@v2
          with:
            tenant-id: ${{ secrets.TENANT_ID }}
            client-id: ${{ secrets.CLIENT_ID }}
            subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

        - name: Terraform Init
          id: init
          run: terraform init -backend-config="resource_group_name=${{vars.RESOURCE_GROUP}}" -backend-config="storage_account_name=${{vars.STORAGE_ACCOUNT}}" -backend-config="container_name=${{vars.CONTAINER_NAME}}"

        - name: Terraform Validate
          id: validate
          run: terraform validate -no-color

        - name: tfsec
          uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
          with:
            tfsec_args: --soft-fail
            github_token: ${{ github.token }}

        - name: Terraform Plan
          id: plan
          run: |
            export exitcode=0
            terraform plan -no-color -var-file="./parameters/dev.tfvars" -out main.tfplan || export exitcode=$?
            echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
            if [ $exitcode -eq 1 ]; then
                echo "Error: Terraform plan failed"
                exit 1
            else
                echo "Terraform plan was successful"
                exit 0
            fi
            
        - name: Publish Terraform Plan
          uses: actions/upload-artifact@v4
          with:
            name: tfplan
            path: ./azure/deploy/main.tfplan
        
        - name: Terraform Plan Status
          if: steps.plan.outcome == 'failure'
          run: exit 1

        - name: Create String Output
          id: tf-plan-string
          run: |
                TERRAFORM_PLAN=$(terraform show -no-color main.tfplan)
                
                delimiter="$(openssl rand -hex 8)"
                echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
                echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
                echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
                echo "" >> $GITHUB_OUTPUT
                echo '```terraform' >> $GITHUB_OUTPUT
                echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
                echo '```' >> $GITHUB_OUTPUT
                echo "</details>" >> $GITHUB_OUTPUT
                echo "${delimiter}" >> $GITHUB_OUTPUT
        - name: Publish Terraform Plan to Task Summary
          env:
            SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
          run: |
             echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

    terraform-apply:
        needs: terraform-plan
        name: Terraform Apply
        runs-on: ubuntu-latest
        environment: prod
        defaults:
            run:
             working-directory: ./azure/deploy
            
        steps:
          - name: Checkout code
            uses: actions/checkout@v2

          - name: Setup Terraform
            uses: hashicorp/setup-terraform@v2

          - name: Azure Login
            uses: azure/login@v2
            with:
                tenant-id: ${{ secrets.TENANT_ID }}
                client-id: ${{ secrets.CLIENT_ID }}
                subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

          - name: Terraform Init
            id: init
            run: terraform init -backend-config="resource_group_name=${{vars.RESOURCE_GROUP}}" -backend-config="storage_account_name=${{vars.STORAGE_ACCOUNT}}" -backend-config="container_name=${{vars.CONTAINER_NAME}}"

          - name: Download Terraform Plan
            uses: actions/download-artifact@v4
            with:
             name: tfplan
             path: ./azure/deploy

          - name: Terraform Apply
            run: terraform apply -auto-approve "./main.tfplan"