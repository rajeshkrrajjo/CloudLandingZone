name: 'TerraformPlan'
description: 'Workflow does Terraform Plan'
inputs:
  working-directory:
    description: 'Path to Terraform files'
    required: true
    type: string
  RESOURCE_GROUP:
    description: 'Azure Resource Group'
    required: true
    type: string
  STORAGE_ACCOUNT:
    description: 'Azure Storage Account'
    required: true
    type: string
  CONTAINER_NAME:
    description: 'Azure Container Name'
    required: true
    type: string
  envrionment_run:
    description: 'Environment to run the Terraform plan'
    required: true
    type: string
  client-id:
    description: 'Azure Client ID'
    required: true
    type: secret
  tenant-id:
    description: 'Azure Tenant ID'
    required: true
    type: secret
  subscription-id:
    description: 'Azure Subscription ID'
    required: true
    type: secret
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init and Plan
        id: plan
        shell: bash
        env:
          ARM_CLIENT_ID: ${{ inputs.client-id }}
          ARM_TENANT_ID: ${{ inputs.tenant-id }}
          ARM_SUBSCRIPTION_ID: ${{ inputs.subscription-id }}
        run: |
          cd ${{inputs.working-directory}}
          terraform fmt -check
          terraform init -backend-config="resource_group_name=${{inputs.RESOURCE_GROUP}}" -backend-config="storage_account_name=${{inputs.STORAGE_ACCOUNT}}" -backend-config="container_name=${{inputs.CONTAINER_NAME}}"
          terraform plan -no-color -var-file="./parameters/${{inputs.envrionment_run}}.tfvars" -out main.tfplan || export exitcode=$?
          terraform validate -no-color
          export exitcode=0
          echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
          if [ $exitcode -eq 1 ]; then
            echo "Error: Terraform plan failed"
            exit 1
          else
            echo "Terraform plan was successful"
            exit 0
          fi

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        shell: bash
        run: exit 1

      - name: Create String Output
        id: tf-plan-string
        shell: bash
        run: |
            cd ${{inputs.working-directory}}
            terraform init -backend-config="resource_group_name=${{inputs.RESOURCE_GROUP}}" -backend-config="storage_account_name=${{inputs.STORAGE_ACCOUNT}}" -backend-config="container_name=${{inputs.CONTAINER_NAME}}"

            TERRAFORM_PLAN=$(terraform show -no-color main.tfplan)
            
            delimiter="$(openssl rand -hex 8)"
            echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
            echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
            echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo '```terraform' >> $GITHUB_OUTPUT
            echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "</details>" >> $GITHUB_OUTPUT
            echo "${delimiter}" >> $GITHUB_OUTPUT
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        shell: bash
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      
      - name: Terraform Apply
        shell: bash
        env:
            ARM_CLIENT_ID: ${{ inputs.client-id }}
            ARM_TENANT_ID: ${{ inputs.tenant-id }}
            ARM_SUBSCRIPTION_ID: ${{ inputs.subscription-id }}
        run: |
            cd ${{ inputs.working-directory }}
            terraform apply -auto-approve "./main.tfplan"
      